üéÆ **Presentazione Progetto: Online Checkers** üéÆ

Sono entusiasta di condividere il progetto finale che ho sviluppato con il mio team per il corso di Junior Java Developer di Generation Italy!

**Online Checkers** √® un'implementazione web del classico gioco della dama, che permette ai giocatori di divertirsi online da qualsiasi luogo. Il progetto dimostra le nostre competenze nello sviluppo full-stack.

üõ†Ô∏è **Tecnologie Utilizzate**:
‚Ä¢ **Backend**: Spring Boot con JPA per la persistenza dei dati
‚Ä¢ **Frontend**: Angular con Bootstrap per un design responsive
‚Ä¢ **Database**: MySQL ospitato su AWS RDS
‚Ä¢ **Deployment**: AWS EC2 per l'hosting dell'applicazione
‚Ä¢ **Controllo Versione**: GitHub per lo sviluppo collaborativo

üîå **Implementazione del Netcode e API REST**:
Il nostro progetto presenta una robusta architettura client-server implementata attraverso API RESTful che gestisce l'intera esperienza di gioco:
‚Ä¢ **Gestione Sessioni di Gioco**: Endpoint REST per creare, unirsi e gestire le sessioni di gioco
‚Ä¢ **Sincronizzazione dello Stato**: Aggiornamenti in tempo reale dello stato del gioco tra i giocatori utilizzando richieste HTTP
‚Ä¢ **Validazione delle Mosse**: Validazione lato server di tutte le mosse dei giocatori per garantire il rispetto delle regole del gioco
‚Ä¢ **Data Transfer Objects (DTOs)**: Scambio efficiente di dati tra frontend e backend
‚Ä¢ **Gestione delle Eccezioni**: Gestione completa degli errori per un'esperienza di gioco fluida

L'architettura REST consente di gestire efficacemente le sessioni di gioco, le mosse, la chat, la registrazione dei giocatori, la logica dell'avversario AI e le funzionalit√† di riavvio del gioco, tutto attraverso un'interfaccia API coerente e ben strutturata.

üé≤ **Funzionalit√† di Gioco**:
‚Ä¢ Partite multiplayer in tempo reale
‚Ä¢ Avversario AI con calcolo strategico delle mosse
‚Ä¢ Chat in-game per la comunicazione tra giocatori
‚Ä¢ Persistenza dello stato di gioco
‚Ä¢ Design responsive per desktop e mobile
‚Ä¢ Validazione delle mosse e applicazione delle regole di gioco
‚Ä¢ Funzionalit√† di reset del gioco

La funzionalit√† multiplayer √® implementata attraverso un meccanismo di polling dove il client controlla regolarmente gli aggiornamenti dello stato del gioco, mentre la modalit√† giocatore singolo sfrutta il nostro algoritmo AI personalizzato che valuta le potenziali mosse in base al valore strategico.

Questo progetto rappresenta il culmine del nostro percorso di apprendimento presso Generation Italy, dove abbiamo applicato sia competenze tecniche che soft skills come lavoro di squadra, problem-solving e project management.

üë®‚Äçüíª **Team di Sviluppo**:
‚Ä¢ Enzo Brancati
‚Ä¢ Domenico Farano
‚Ä¢ AnielloPio Pentangelo
‚Ä¢ Daniele Filareti (io)

üîó **Provalo tu stesso**: https://onlinecheckers.org

Per qualsiasi domanda, segnalazione di bug o suggerimenti per lo sviluppo, sentiti libero di contattare qualsiasi membro del team tramite LinkedIn o attraverso le informazioni di contatto sul sito web.

Vorrei esprimere la mia sincera gratitudine a Generation Italy per aver fornito questa preziosa opportunit√† di apprendimento e per la loro guida durante il corso. Le competenze e l'esperienza acquisite durante questo programma di Junior Java Developer sono state inestimabili per la mia crescita professionale.

#JavaDevelopment #WebDevelopment #SpringBoot #Angular #AWS #GenerationItaly #ProjectShowcase #SoftwareDevelopment #Gaming #RESTfulAPI
